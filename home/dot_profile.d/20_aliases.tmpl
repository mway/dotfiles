#!/usr/bin/env bash
# shellcheck disable=SC2139

###
# Versions for ensure wrappers
BAT_VERSION="${MW_BAT_VERSION:-"0.24.0"}"
BTOP_VERSION="${MW_BTOP_VERSION:-"1.3.1"}"
CHEZMOI_VERSION="${MW_CHEZMOI_VERSION:-"2.47.0"}"
DIFFTASTIC_VERSION="${MW_DIFFTASTIC_VERSION:-"0.54.0"}"
DIRENV_VERSION="${MW_DIRENV_VERSION:-"2.33.0"}"
ENSURE_VERSION="${MW_ENSURE_VERSION:-"0.4.2"}"
EZA_VERSION="${MW_EZA_VERSION:-"0.17.0"}"
FD_VERSION="${MW_FD_VERSION:-"9.0.0"}"
FZF_VERSION="${MW_FZF_VERSION:-"0.46.0"}"
GH_VERSION="${MW_GH_VERSION:-"2.40.1"}"
GIT_FLOW_VERSION="${MW_GIT_FLOW_VERSION:-"0.7.1"}"
GOLANGCI_LINT_VERSION="${MW_GOLANGCI_LINT_VERSION:-"1.55.2"}"
GOPLS_VERSION="${MW_GOPLS_VERSION:-"0.14.2"}"
GO_VERSION="${MW_GO_VERSION:-"1.22.0"}"
HELIX_VERSION="${MW_HELIX_VERSION:-"23.10"}"
JQ_VERSION="${MW_JQ_VERSION:-"1.7.1"}"
JUST_VERSION="${MW_JUST_VERSION:-"1.23.0"}"
MOCKGEN_VERSION="${MW_MOCKGEN_VERSION:-"0.4.0"}"
RIPGREP_VERSION="${MW_RIPGREP_VERSION:-"14.1.0"}"
RUSTUP_VERSION="${MW_RUSTUP_VERSION:-"1.26.0"}"
STATICCHECK_VERSION="${MW_STATICCHECK_VERSION:-"0.4.6"}"
YQ_VERSION="${MW_YQ_VERSION:-"4.40.5"}"
ZELLIJ_VERSION="${MW_ZELLIJ_VERSION:-"0.39.2"}"

__ensure_path() {
  which -as ensure | \grep -E '^/' | \cut -d' ' -f1
}

__get_latest_ensure_release_asset_url() {
  readonly os="$(uname -o | tr '[:upper:]' '[:lower:]')"
  local arch="$(uname -m)"
  [[ "$arch" != "x86_64" ]] || arch="amd64"

  if command -v jq >/dev/null; then
    \curl -sL \
          -H "Authorization: Bearer ${MW_GITHUB_TOKEN}" \
          https://api.github.com/repos/mway/ensure-go/releases | \
      \jq ".[0].assets.[] | select(.name==\"ensure-${arch}-${os}\").url" | \
      xargs
  else
    \curl -sL \
          -H "Authorization: Bearer ${MW_GITHUB_TOKEN}" \
          https://api.github.com/repos/mway/ensure-go/releases | \
      \grep ensure-arm64-darwin -B 3 | \
      \grep '"url"' | \
      \head -n1 | \
      \cut -d, -f1 | \
      \awk '{print $NF}' | \
      xargs
  fi
}

__install_ensure() {
  readonly dst="$1"
  local src;
  src="$(__get_latest_ensure_release_asset_url)"
  [ $? -eq 0 ] || { echo "Error: failed to get release asset URL" >&2; exit 1; }

  mkdir -p "$(dirname "$dst")" || {
    echo "Error: failed to mkdir -p '$dst'" >&2
    return 1
  }

  \curl -sL \
        -H "Authorization: Bearer ${MW_GITHUB_TOKEN}" \
        -H 'Accept: application/octet-stream' \
        -o "$dst" \
        "${src}" || {
    echo "Error: failed to fetch remote asset: ${src}" >&2
    return 1
  }

  chmod +x "$dst"
}

ensure() {
  local prog="$(__ensure_path)"
  [ -n "$prog" ] || {
    echo "Ensure not found, installing..."
    prog="$HOME/go/bin/ensure"
    __install_ensure "$prog" || {
      echo "Error: ensure ($prog) could not be installed" >&2
      return 1
    }
  }

  "$prog" --version 2>&1 | \grep "v${ENSURE_VERSION}" >/dev/null || {
    echo "Updating ensure..."
    __install_ensure "$prog" || {
      echo "Error: ensure ($prog) could not be installed" >&2
      return 1
    }
  }

  local debug;
  [ -z "$ENSURE_DEBUG" ] || debug="--debug"
  "$prog" $debug "$@"
}

{{ if eq .chezmoi.os "linux" -}}
overrides="--config='$HOME/.config/ensure/overrides.yml'"
{{ else -}}
overrides=""
{{ end -}}

###
# Wrapper aliases around ensure
alias ansi="ensure file ansi --"
alias bat="ensure cargo bat --version='${BAT_VERSION}' --"
alias btop="ensure archive btop --version='${BTOP_VERSION}' --"
alias chezmoi="ensure script chezmoi --version='${CHEZMOI_VERSION}' --"
alias difft="ensure cargo difft --version='${DIFFTASTIC_VERSION}' --"
alias direnv="ensure script direnv --version='${DIRENV_VERSION}' --"
alias ensure-ensure="ensure go ensure --version='${ENSURE_VERSION}' --"
alias eza="ensure cargo eza --version='${EZA_VERSION}' --"
alias fd="ensure cargo fd --version='${FD_VERSION}' -- --no-ignore --hidden"
alias fzf="ensure archive fzf $overrides --version='${FZF_VERSION}' --"
alias gh="ensure archive gh --version='${GH_VERSION}' --"
alias go="GOTOOLCHAIN=go${GO_VERSION} ensure archive go --version='${GO_VERSION}' --"
alias golangci-lint="ensure archive golangci-lint --version='${GOLANGCI_LINT_VERSION}' --"
alias gopls="ensure go gopls --version='${GOPLS_VERSION}' --"
alias hx="ensure cargo hx --version='${HELIX_VERSION}' --"
alias jq="ensure file jq --version='${JQ_VERSION}' --"
alias just="ensure cargo just --version='${JUST_VERSION}' -- --unstable"
alias mockgen="ensure go mockgen --version='${MOCKGEN_VERSION}' --"
alias rg="ensure cargo rg --version='${RIPGREP_VERSION}' --"
alias rustup="ensure script rustup --version='${RUSTUP_VERSION}' --"
alias staticcheck="ensure go staticcheck --version='${STATICCHECK_VERSION}' --"
alias yq="ensure go yq --version='${YQ_VERSION}' --"
alias zellij="ensure cargo zellij --version='${ZELLIJ_VERSION}' --"
alias git-flow="ensure go git-flow --package='go.mway.dev/git/cmd/git-flow' --version='${GIT_FLOW_VERSION}' --"

###
# Other aliases
alias cm='chezmoi'
alias grep='rg'
alias htop='sudo htop'
alias ls='eza -al'
alias lsg='ls --git'
alias mkdir='mkdir -p'
alias oplogin='eval $(op signin)'
